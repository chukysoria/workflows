name: get-info
run-name: ℹ️ Getting information from ${{ inputs.config_path }}

on:
  workflow_call: 
    inputs:
      config_path:
        description: Location of the config file
        default: config.yaml
        required: false
        type: string
    outputs:
      name:
        description: Name of the package
        value: ${{ jobs.information.outputs.name }}
      image: 
        description: Image name
        value: ${{ jobs.information.outputs.image }}
      description: 
        description: Dwscription to store on the timage
        value: ${{ jobs.information.outputs.description }}
      ext_release: 
        description: Version of the external app
        value: ${{ jobs.information.outputs.ext_release }}
      ext_release_clean: 
        description: Stripped external version
        value: ${{ jobs.information.outputs.ext_release_clean }}
      architectures: 
        description: Architectures to build
        value: ${{ jobs.information.outputs.architectures }}   
      version:
        description: Version of the repository
        value: ${{ jobs.information.outputs.version }}      

jobs:
  information:
    name: ℹ️ Gather add-on information
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.basic.outputs.name }}
      image: ${{ steps.basic.outputs.image }}
      description: ${{ steps.basic.outputs.description }}
      ext_release: ${{ steps.basic.outputs.ext_release }}
      ext_release_clean: ${{ steps.basic.outputs.ext_release_clean }}
      architectures: ${{ steps.architectures.outputs.architectures }}   
      version: ${{ steps.basic.outputs.version }}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          sparse-checkout: ${{ inputs.config_path }}
          sparse-checkout-cone-mode: false

      - name: ℹ️ Extract basic image information
        shell: bash
        id: basic
        run: | 
          name=$(yq --no-colors eval '.name' "${{ inputs.config_path }}")
          echo "name=${name}" >> "$GITHUB_OUTPUT"
  
          description=$(yq --no-colors eval '.description' "${{ inputs.config_path }}")
          echo "description=${description}" >> "$GITHUB_OUTPUT"
  
          image=$(yq --no-colors eval '.image // ""' "${{ inputs.config_path }}")
          echo "image=${image}" >> "$GITHUB_OUTPUT"

          ext_release=$(yq --no-colors eval '.ext_release' "${{ inputs.config_path }}")
          echo "ext_release=${ext_release}" >> "$GITHUB_OUTPUT"

          version=$(yq --no-colors eval '.version' "${{ inputs.config_path }}")
          echo "version=${version}" >> "$GITHUB_OUTPUT"

          echo "ext_release_clean=$(echo $ext_release | sed 's/[~,%@+;:/]//g')" >> "$GITHUB_OUTPUT"
  
      - name: ℹ️ Extract add-on architecture information
        shell: bash
        id: architectures
        run: |
          architectures=$(
            yq --no-colors --output-format json  eval '.arch' "${{ inputs.config_path }}" \
              | jq --raw-output --compact-output '. | sort'
          )
          echo "architectures=${architectures}" >> "$GITHUB_OUTPUT"
  
          for architecture in \
            aarch64 \
            amd64 \
            armhf \
            armv7 \
            i386;
          do
            available=$(
              yq --no-colors eval \
                ".arch[] | select(. == \"${architecture}\") | . or false" \
                "${{ inputs.config_path }}"
            )
            echo "${architecture}=${available}" >> "$GITHUB_OUTPUT"
          done   
